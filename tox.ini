[tox]
envlist = py27,py34,pep8,pylint
minversion = 1.6
skipsdist = True

[testenv]
setenv = VIRTUAL_ENV={envdir}
usedevelop = True
install_command = {toxinidir}/tools/tox_install.sh {opts} {packages}
deps = -r{toxinidir}/requirements.txt
       -r{toxinidir}/test-requirements.txt
whitelist_externals = sh
commands =
  sh tools/pretty_tox.sh '{posargs}'
# there is also secret magic in pretty_tox.sh which lets you run in a fail only
# mode. To do this define the TRACE_FAILONLY environmental variable.

[testenv:functional]
deps =
  {[testenv]deps}
  -r{toxinidir}/neutron_vpnaas/tests/functional/requirements.txt

[testenv:dsvm-functional]
setenv = OS_TEST_PATH=./neutron_vpnaas/tests/functional/openswan
         OS_SUDO_TESTING=1
         OS_ROOTWRAP_CMD=sudo {envdir}/bin/neutron-rootwrap {envdir}/etc/neutron/rootwrap.conf
         OS_ROOTWRAP_DAEMON_CMD=sudo {envdir}/bin/neutron-rootwrap-daemon {envdir}/etc/neutron/rootwrap.conf
         OS_FAIL_ON_MISSING_DEPS=1
deps =
  {[testenv:functional]deps}
sitepackages=True
whitelist_externals =
  sh
  cp
  sudo
commands =
  {toxinidir}/tools/deploy_rootwrap.sh {toxinidir} {envdir}
  sh tools/pretty_tox.sh '{posargs}'

[testenv:dsvm-functional-sswan]
setenv = OS_TEST_PATH=./neutron_vpnaas/tests/functional/strongswan
         OS_SUDO_TESTING=1
         OS_ROOTWRAP_CMD=sudo {envdir}/bin/neutron-rootwrap {envdir}/etc/neutron/rootwrap.conf
         OS_ROOTWRAP_DAEMON_CMD=sudo {envdir}/bin/neutron-rootwrap-daemon {envdir}/etc/neutron/rootwrap.conf
         OS_FAIL_ON_MISSING_DEPS=1
deps =
  {[testenv:functional]deps}
sitepackages=True
whitelist_externals =
  sh
  cp
  sudo
commands =
  {toxinidir}/tools/deploy_rootwrap.sh {toxinidir} {envdir}
  sh tools/pretty_tox.sh '{posargs}'

[tox:jenkins]
sitepackages = True
downloadcache = ~/cache/pip

[testenv:pep8]
deps =
  {[testenv]deps}
  pylint
commands =
  flake8
  pylint --rcfile=.pylintrc --output-format=colorized {posargs:neutron_vpnaas}
  {toxinidir}/tools/check_unit_test_structure.sh
  neutron-db-manage --subproject neutron-vpnaas --database-connection sqlite:// check_migration
whitelist_externals = sh

[testenv:i18n]
commands = python ./tools/check_i18n.py ./neutron-vpnaas ./tools/i18n_cfg.py

[testenv:cover]
commands =
  python setup.py test --coverage --coverage-package-name=neutron_vpnaas --testr-args='{posargs}'

[testenv:dsvm-functional-cover]
setenv = {[testenv:dsvm-functional]setenv}
commands =
  python setup.py test --coverage --coverage-package-name=neutron_vpnaas --testr-args='{posargs}'

[testenv:dsvm-functional-sswan-cover]
setenv = {[testenv:dsvm-functional-sswan]setenv}
commands =
  python setup.py test --coverage --coverage-package-name=neutron_vpnaas --testr-args='{posargs}'

[testenv:venv]
commands = {posargs}

[testenv:docs]
commands = sphinx-build -W -b html doc/source doc/build

[testenv:py34]
commands = python -m testtools.run \
    neutron_vpnaas.tests.unit.services.vpn.common.test_netns_wrapper \
    neutron_vpnaas.tests.unit.extensions.test_vpnaas \
    neutron_vpnaas.tests.unit.services.vpn.device_drivers.test_ipsec \
    neutron_vpnaas.tests.unit.services.vpn.device_drivers.test_cisco_ipsec \
    neutron_vpnaas.tests.unit.services.vpn.device_drivers.test_cisco_csr_rest_client \
    neutron_vpnaas.tests.unit.services.vpn.test_vpn_service \
    neutron_vpnaas.tests.unit.services.vpn.test_vyatta_vpn_service \
    neutron_vpnaas.tests.unit.services.vpn.service_drivers.test_vyatta_ipsec \
    neutron_vpnaas.tests.unit.services.vpn.service_drivers.test_ipsec \
    neutron_vpnaas.tests.unit.services.vpn.service_drivers.test_cisco_ipsec

[flake8]
# E125 continuation line does not distinguish itself from next logical line
# E126 continuation line over-indented for hanging indent
# E128 continuation line under-indented for visual indent
# E129 visually indented line with same indent as next logical line
# E265 block comment should start with ‘# ‘
# H305 imports not grouped correctly
# H405 multi line docstring summary not separated with an empty line
# TODO(marun) H404 multi line docstring should start with a summary
ignore = E125,E126,E128,E129,E265,H305,H404,H405
show-source = true
builtins = _
exclude = .venv,.git,.tox,dist,doc,*openstack/common*,*lib/python*,*egg,build,tools,.ropeproject,rally-scenarios

[hacking]
import_exceptions = neutron.i18n
local-check-factory = neutron.hacking.checks.factory
