[tox]
envlist = py34,py27,pep8
minversion = 1.6
skipsdist = True

[testenv]
setenv = VIRTUAL_ENV={envdir}
usedevelop = True
install_command = {toxinidir}/tools/tox_install.sh constrained -c{env:UPPER_CONSTRAINTS_FILE:https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt?h=stable/mitaka} {opts} {packages}
deps = -r{toxinidir}/requirements.txt
       -r{toxinidir}/test-requirements.txt
whitelist_externals = sh
commands =
  {toxinidir}/tools/ostestr_compat_shim.sh {posargs}
# there is also secret magic in ostestr which lets you run in a fail only
# mode. To do this define the TRACE_FAILONLY environmental variable.

[testenv:functional]
deps =
  {[testenv]deps}
  -r{toxinidir}/neutron_vpnaas/tests/functional/requirements.txt
setenv =
  OS_SUDO_TESTING=1
  OS_ROOTWRAP_CMD=sudo {envdir}/bin/neutron-rootwrap {envdir}/etc/neutron/rootwrap.conf
  OS_ROOTWRAP_DAEMON_CMD=sudo {envdir}/bin/neutron-rootwrap-daemon {envdir}/etc/neutron/rootwrap.conf
  OS_FAIL_ON_MISSING_DEPS=1
whitelist_externals =
  sh
  cp
  sudo

[testenv:dsvm-functional]
setenv =
  OS_TEST_PATH=./neutron_vpnaas/tests/functional/openswan
  {[testenv:functional]setenv}
deps = {[testenv:functional]deps}
sitepackages=True
whitelist_externals = {[testenv:functional]whitelist_externals}
commands =
  {toxinidir}/tools/deploy_rootwrap.sh {toxinidir} {envdir}
  sh tools/pretty_tox.sh '{posargs}'

[testenv:api]
sitepackages=True
setenv =
 OS_TEST_PATH=./neutron_vpnaas/tests/api
 OS_TESTR_CONCURRENCY=1
 TEMPEST_CONFIG_DIR={env:TEMPEST_CONFIG_DIR:/opt/stack/tempest/etc}

[testenv:dsvm-functional-sswan]
setenv =
  OS_TEST_PATH=./neutron_vpnaas/tests/functional/strongswan
  {[testenv:functional]setenv}
deps = {[testenv:functional]deps}
sitepackages=True
whitelist_externals = {[testenv:functional]whitelist_externals}
commands =
  {toxinidir}/tools/deploy_rootwrap.sh {toxinidir} {envdir}
  sh tools/pretty_tox.sh '{posargs}'

[testenv:releasenotes]
# TODO(pc_m): Remove install_command, once infra supports constraints for
# this target.
install_command = {toxinidir}/tools/tox_install.sh unconstrained {opts} {packages}
commands = sphinx-build -a -E -W -d releasenotes/build/doctrees -b html releasenotes/source releasenotes/build/html

[testenv:pep8]
commands =
  flake8
  pylint --rcfile=.pylintrc --output-format=colorized {posargs:neutron_vpnaas}
  {toxinidir}/tools/check_unit_test_structure.sh
  neutron-db-manage --subproject neutron-vpnaas --database-connection sqlite:// check_migration
  {[testenv:genconfig]commands}
whitelist_externals = sh

[testenv:i18n]
commands = python ./tools/check_i18n.py ./neutron-vpnaas ./tools/i18n_cfg.py

[testenv:cover]
# TODO(pc_m): Remove install_command, once infra supports constraints for
# this target.
install_command = {toxinidir}/tools/tox_install.sh unconstrained {opts} {packages}
commands =
  python setup.py test --coverage --coverage-package-name=neutron_vpnaas --testr-args='{posargs}'

[testenv:venv]
# TODO(pc_m): Remove install_command, once infra supports constraints for
# this target.
install_command = {toxinidir}/tools/tox_install.sh unconstrained {opts} {packages}
commands = {posargs}

[testenv:docs]
commands = sphinx-build -W -b html doc/source doc/build

[flake8]
# E125 continuation line does not distinguish itself from next logical line
# E126 continuation line over-indented for hanging indent
# E128 continuation line under-indented for visual indent
# E129 visually indented line with same indent as next logical line
# E265 block comment should start with ‘# ‘
# H405 multi line docstring summary not separated with an empty line
# TODO(marun) H404 multi line docstring should start with a summary
ignore = E125,E126,E128,E129,E265,H404,H405
show-source = true
exclude = .venv,.git,.tox,dist,doc,*lib/python*,*egg,build,tools,.ropeproject,rally-scenarios

[hacking]
import_exceptions = neutron_vpnaas._i18n
local-check-factory = neutron.hacking.checks.factory

[testenv:genconfig]
commands = {toxinidir}/tools/generate_config_file_samples.sh
